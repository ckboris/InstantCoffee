<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition template="./WEB-INF/templates/template.xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns="http://www.w3.org/1999/xhtml">

    <!--Forward/backward navigation-->
    <ui:define name="back">
        <span class="glyphicon glyphicon-arrow-left"></span>
        <h:link value="Back" outcome="EditCoffee"/>
    </ui:define>
    <ui:define name="next">
        <h:link value="Next" outcome="Search"/>
        <span class="glyphicon glyphicon-arrow-right"></span>
    </ui:define>
    <ui:define name="content">
        <h1>Login</h1>
        <h:form id="loginForm" enctype="multipart/form-data">
            <div class="control-group error col-lg-12">
                <h:outputLabel value="Username"/>
                <h:inputText class="form-control" value="#{loginBean.username}" id="usn"></h:inputText>
            </div>
            <div class="control-group error col-lg-12">
                <h:outputLabel value="Password"/>
                <h:inputSecret class="form-control" value="#{loginBean.password}"/>
            </div>
            <div class="btnDiv">
                <h:commandButton class="btn formBtn" value="Login" action="#{loginBean.login()}"/>
            </div>
        </h:form>
        <h:form id="logout" rendered="#{request.userPrincipal.toString() != null}">
            <div class="form-group">
                <h:commandLink class="btn formBtn" action="#{loginBean.logout()}" value="Log me out!"/>
            </div>
        </h:form> 
    </ui:define>

    <ui:define name="xhtml">

    </ui:define>
    
    <ui:define name="service">
         None :)
    </ui:define>
    
    <ui:define name="bean">
package Bean;

import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.inject.Model;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

/**
 * Handles logic for logging in and out.
 */
@Model
public class LoginBean implements Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger LOG = 
        Logger.getLogger(LoginBean.class.getName());
    private boolean flag = false;
    private String username = null;
    private String password = null; 
    
    /**
     * Log user in if they are in the appropriate role. 
     * Otherwise, throw an error.
     * 
     * @return The correct URL String based on whether 
     * or not the user is in the right role.
     */
    public String login() {
        ExternalContext ec = 
            FacesContext.getCurrentInstance()
            .getExternalContext();
        HttpServletRequest req = 
            (HttpServletRequest) ec.getRequest();
        try {
            req.login(username,password);
            if(req.isUserInRole(&quot;Admin&quot;)) {
                flag=true;
                return &quot;Admin/AdminPage.xhtml?
                    faces-redirect=true&quot;;
            } else {
                System.out.println(&quot;User not in role!&quot;);
                return null;
            }
        } catch (ServletException se) {
            System.out.println(&quot;Bad username or password&quot;);
            return null;
        }
    }
    
    /**
     * Log user out.
     * 
     * @return A URL String redirecting to the correct 
     * page if the logout is successful, otherwise 
     * throw an error.
     */
    public String logout() {
        ExternalContext ec = 
            FacesContext.getCurrentInstance()
            .getExternalContext();
        HttpServletRequest req = 
            (HttpServletRequest) ec.getRequest();
        try {
            req.logout();
            ec.invalidateSession();
            ec.redirect(ec.getRequestContextPath() 
                + &quot;/Login.xhtml?faces-redirect=true&quot;);
            return &quot;&quot;;
        } catch (Exception e) {
            LOG.log(Level.INFO, &quot;Logout failed&quot;);
            return null;
        }
    }
    
    /**
     * Check whether user is logged in.
     * 
     * @return The status of the boolean flag - 
     * true if user is logged in, false otherwise.
     */
    public boolean getFlag() {
        return flag;
    }

    /**
     * Set the flag indicating if a user is 
     * logged in or out.
     * 
     * @param flag Set true if the user is logged in, 
     * else set false.
     */
    public void setFlag(boolean flag) {
        this.flag = flag;
    }

    /* Getters and Setters */
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
    </ui:define>
</ui:composition>
