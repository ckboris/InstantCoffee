<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition template="./WEB-INF/templates/template.xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns="http://www.w3.org/1999/xhtml">
    <f:metadata>
        <f:viewParam name="id" value="#{editCoffeeBean.id}"/>
        <f:viewAction action="#{editCoffeeBean.init()}"/>
    </f:metadata>
    <!--Forward/backward navigation-->
    <ui:define name="back">
        <span class="glyphicon glyphicon-arrow-left"></span>
        <h:link value="Back" outcome="ViewCoffee"/>
    </ui:define>
    <ui:define name="next">
        <h:link value="Next" outcome="Login"/>
        <span class="glyphicon glyphicon-arrow-right"></span>
    </ui:define>
    <ui:define name="content">
        <h1>Edit Coffee</h1>
        <h:form>
            <div class="control-group error col-lg-12">
                <h:outputLabel value="Variety "/>
                <h:inputText id="itemName" class="form-control" value="#{editCoffeeBean.coffee.variety}"/>
                <span class="error text-danger"> <h:message for="itemName" errorClass="error-message"/></span>
            </div>
            <div class="control-group error col-lg-12">
                <h:outputLabel value="Price "/>
                <h:inputText id="itemPrice" class="form-control" value="#{editCoffeeBean.coffee.price}"/>
            </div>
            <div class="control-group error col-lg-12">
                <h:outputLabel value="Roast"/>
                <div>
                    <h:selectOneMenu class="form-control"   
                            value="#{newCoffeeBean.coffee.roast}">
                        <f:selectItems value="#{newCoffeeBean.roasts}" var="roast"
                                       itemValue="#{roast}" itemLabel="#{roast.label}"/>
                    </h:selectOneMenu>
                </div>
            </div>

            <div class="btnDiv">
                <h:commandButton class="btn formBtn" value="Save Changes" action="#{editCoffeeBean.submit()}"/>
                <h:commandButton class="btn btn-danger formBtn" value="Delete Coffee" action="#{editCoffeeBean.delete()}"/>
            </div>
        </h:form>
    </ui:define>

    <ui:define name="xhtml">
&lt;?xml version='1.0' encoding='UTF-8' ?&gt;
&lt;!DOCTYPE composition PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;ui:composition template=&quot;./WEB-INF/templates/template.xhtml&quot;
                xmlns:ui=&quot;http://xmlns.jcp.org/jsf/facelets&quot;
                xmlns:f=&quot;http://xmlns.jcp.org/jsf/core&quot;
                xmlns:h=&quot;http://xmlns.jcp.org/jsf/html&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
    &lt;f:metadata&gt;
        &lt;f:viewParam name=&quot;id&quot; value=&quot;#{editCoffeeBean.id}&quot;/&gt;
        &lt;f:viewAction action=&quot;#{editCoffeeBean.init()}&quot;/&gt;
    &lt;/f:metadata&gt;
    
    &lt;ui:define name=&quot;content&quot;&gt;
        &lt;h1&gt;Edit Coffee&lt;/h1&gt;
        &lt;h:form&gt;
            &lt;div class=&quot;control-group error col-lg-12&quot;&gt;
                &lt;h:outputLabel value=&quot;Variety &quot;/&gt;
                &lt;h:inputText id=&quot;itemName&quot; class=&quot;form-control&quot; value=&quot;#{editCoffeeBean.coffee.variety}&quot;/&gt;
                &lt;span class=&quot;error text-danger&quot;&gt; &lt;h:message for=&quot;itemName&quot; errorClass=&quot;error-message&quot;/&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&quot;control-group error col-lg-12&quot;&gt;
                &lt;h:outputLabel value=&quot;Price &quot;/&gt;
                &lt;h:inputText id=&quot;itemPrice&quot; class=&quot;form-control&quot; value=&quot;#{editCoffeeBean.coffee.price}&quot;/&gt;
            &lt;/div&gt;
            &lt;div class=&quot;control-group error col-lg-12&quot;&gt;
                &lt;h:outputLabel value=&quot;Roast&quot;/&gt;
                &lt;div&gt;
                    &lt;h:selectOneMenu class=&quot;form-control&quot;   
                            value=&quot;#{newCoffeeBean.coffee.roast}&quot;&gt;
                        &lt;f:selectItems value=&quot;#{newCoffeeBean.roasts}&quot; var=&quot;roast&quot;
                                       itemValue=&quot;#{roast}&quot; itemLabel=&quot;#{roast.label}&quot;/&gt;
                    &lt;/h:selectOneMenu&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&quot;btnDiv&quot;&gt;
                &lt;h:commandButton class=&quot;btn formBtn&quot; value=&quot;Save Changes&quot; action=&quot;#{editCoffeeBean.submit()}&quot;/&gt;
                &lt;h:commandButton class=&quot;btn btn-danger formBtn&quot; value=&quot;Delete Coffee&quot; action=&quot;#{editCoffeeBean.delete()}&quot;/&gt;
            &lt;/div&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;
    </ui:define>
    
    <ui:define name="service">
package Service;

import Pojo.Coffee;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Handles connection to Coffee table. 
 */
@Stateless
public class CoffeeService {
    @PersistenceContext(unitName=&quot;InstantCoffeePU&quot;)
    private EntityManager em;
    
    /**
     * Load a Coffee object given an ID.
     * 
     * @param id Identifier for the Coffee object to load.
     * @return Coffee object associated with the ID.
     */
    public Coffee load(Long id) {
        return em.find(Coffee.class, id);
    }
    
    /**
     * Add a new Coffee object to the database.
     * 
     * @param coffee The new Coffee object to be persisted.
     */
    public void create(Coffee coffee) {
        em.persist(coffee);
    } 
    
    /**
     * Get all Coffee objects in the database.
     * 
     * @return A List containing all Coffee 
     * objects in the database.
     */
    public List&lt;Coffee&gt; findAll() {
        Query q = em.createNamedQuery(&quot;Coffee.FindAll&quot;);
        List&lt;Coffee&gt; coffees = 
            (List&lt;Coffee&gt;) q.getResultList();
        return coffees;
    }
    
    /**
     * Update a Coffee object in the database.
     * 
     * @param coffee The Coffee object being updated.
     */
    public void update(Coffee coffee) {
        em.merge(coffee);
    }
    
    /**
     * Query the Coffee table based on a search string.
     * 
     * @param searchString The search text to query by.
     * @return A List of Coffee objects matching the search.
     */
    public List&lt;Coffee&gt; searchByAll(String searchString) {
        Query q = em.createNamedQuery(&quot;Coffee.findByAll&quot;);
        // Note: This must match the name given 
        // in the view's viewparam.
        q.setParameter(&quot;searchString&quot;,
            (&quot;%&quot;+searchString+&quot;%&quot;).toLowerCase());
        List&lt;Coffee&gt; coffees = 
            (List&lt;Coffee&gt;) q.getResultList();
        return coffees;
    }
    
    /**
     * Delete a Coffee object from the table.
     * 
     * @param coffee Coffee to delete.
     */
    public void delete(Coffee coffee) {
        em.merge(coffee);
        em.remove(coffee);
        
    }
}
    </ui:define>
    
    <ui:define name="bean">
package Bean;

import Pojo.Coffee;
import Service.BrandService;
import Service.CoffeeService;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

/**
 * Handles edits made to Coffee objects.
 */
@ManagedBean
@ViewScoped
public class EditCoffeeBean implements Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger LOG = 
        Logger.getLogger(ViewCoffeeBean.class.getName());
    @EJB
    private CoffeeService coffeeService; 
    private Coffee coffee;
    private long id;
    
    @EJB
    private BrandService brandService;
    
    /**
     * Empty constructor.
     */
    public EditCoffeeBean() {
    }
    
    /**
     * Constructor that takes a Coffee object.
     * 
     * @param coffee The Coffee object being edited.
     */
    public EditCoffeeBean(Coffee coffee) {
        this.coffee = coffee;
    }
    
    /**
     * Init method. Loads the Coffee object by ID.
     * 
     * @return Null if the Coffee object with 
     * a given ID is loaded, otherwise redirect to 
     * index.
     */
    public String init() {
        try {
            //coffee = coffeeService.load(1L);
            coffee = coffeeService.load(id);
            return null;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, 
                &quot;Error loading the Coffee object&quot;, e);
            return &quot;/&quot;;
        }
    }
    
    /**
     * Save edits to a given Coffee object. 
     * 
     * @return To ListCoffee view if the edit is successful, 
     * otherwise redirect to index.
     */
    public String submit() {
        try {
            coffee.setVariety(coffee.getVariety());
            coffeeService.update(coffee);
            return &quot;/ListCoffee.xhtml?faces-redirect=true&quot;;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, 
                &quot;Could not update Coffee object&quot;);
            return &quot;/&quot;;
        }
    }
    
    /**
     * Delete a given Coffee object.
     * 
     * @return To ListCoffee view if the edit is successful, 
     * otherwise redirect to index.
     */
    public String delete() {
        System.out.println(&quot;In delete&quot;);
        try {
            System.out.println(&quot;In try&quot;);
            brandService.delete(coffee.getBrand());
            return &quot;/ListCoffee.xhtml&quot;;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, 
                &quot;Could not delete Coffee object, &quot;, e);
            return &quot;/&quot;;
        }
    } 

    /* Getters and Setters */
    public Coffee getCoffee() {
        return coffee;
    }

    public void setCoffee(Coffee coffee) {
        this.coffee = coffee;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
}
    </ui:define>

</ui:composition>
