<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition template="./WEB-INF/templates/template.xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns="http://www.w3.org/1999/xhtml">
    <f:metadata>
        <f:viewParam name="id" value="#{viewCoffeeBean.id}"/>
        <f:viewAction action="#{viewCoffeeBean.init()}"/>
    </f:metadata>
    <!--Forward/backward navigation-->
    <ui:define name="back">
        <span class="glyphicon glyphicon-arrow-left"></span>
        <h:link value="Back" outcome="NewCoffee"/>
    </ui:define>
    <ui:define name="next">
        <h:link value="Next" outcome="EditCoffee"/>
        <span class="glyphicon glyphicon-arrow-right"></span>
    </ui:define>
    <ui:define name="content">
        <h1>View Coffee</h1>
        <div>
            <h:outputLabel value="Variety Name: "/>
            <h:outputText value=" #{viewCoffeeBean.coffee.variety}"/>
        </div>
        <div>
            <h:outputLabel value="Price/lb: "/>
            <h:outputText value=" $#{viewCoffeeBean.coffee.price}"/>
        </div>
        <div>
            <h:outputLabel value="Roast: "/>
            <h:outputText value=" #{viewCoffeeBean.coffee.roast}"/>
        </div>
        <div>
            <h:outputLabel value="Brand: "/>
            <h:outputText value=" #{viewCoffeeBean.coffee.brand.name}"/>
        </div>
    </ui:define>

    <ui:define name="xhtml">
&lt;?xml version='1.0' encoding='UTF-8' ?&gt;
&lt;!DOCTYPE composition PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;ui:composition template=&quot;./WEB-INF/templates/template.xhtml&quot;
                xmlns:ui=&quot;http://xmlns.jcp.org/jsf/facelets&quot;
                xmlns:f=&quot;http://xmlns.jcp.org/jsf/core&quot;
                xmlns:h=&quot;http://xmlns.jcp.org/jsf/html&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
    &lt;f:metadata&gt;
        &lt;f:viewParam name=&quot;id&quot; value=&quot;#{viewCoffeeBean.id}&quot;/&gt;
        &lt;f:viewAction action=&quot;#{viewCoffeeBean.init()}&quot;/&gt;
    &lt;/f:metadata&gt;
    
    &lt;ui:define name=&quot;content&quot;&gt;
        &lt;h1&gt;View Coffee&lt;/h1&gt;
        &lt;div&gt;
            &lt;h:outputLabel value=&quot;Variety: &quot;/&gt;
            &lt;h:outputText value=&quot; #{viewCoffeeBean.coffee.variety}&quot;/&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;h:outputLabel value=&quot;Price: &quot;/&gt;
            &lt;h:outputText value=&quot; $#{viewCoffeeBean.coffee.price}&quot;/&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;h:outputLabel value=&quot;Roast: &quot;/&gt;
            &lt;h:outputText value=&quot; #{viewCoffeeBean.coffee.roast}&quot;/&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;h:outputLabel value=&quot;Brand &quot;/&gt;
            &lt;h:outputText value=&quot; #{viewCoffeeBean.coffee.brand.name}&quot;/&gt;
        &lt;/div&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;
    </ui:define>
    
    <ui:define name="service">
package Service;

import Pojo.Coffee;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Handles connection to Coffee table. 
 */
@Stateless
public class CoffeeService {
    @PersistenceContext(unitName=&quot;InstantCoffeePU&quot;)
    private EntityManager em;
    
    /**
     * Load a Coffee object given an ID.
     * 
     * @param id Identifier for the Coffee object to load.
     * @return Coffee object associated with the ID.
     */
    public Coffee load(Long id) {
        return em.find(Coffee.class, id);
    }
    
    /**
     * Add a new Coffee object to the database.
     * 
     * @param coffee The new Coffee object to be persisted.
     */
    public void create(Coffee coffee) {
        em.persist(coffee);
    } 
    
    /**
     * Get all Coffee objects in the database.
     * 
     * @return A List containing all Coffee 
     * objects in the database.
     */
    public List&lt;Coffee&gt; findAll() {
        Query q = em.createNamedQuery(&quot;Coffee.FindAll&quot;);
        List&lt;Coffee&gt; coffees = 
            (List&lt;Coffee&gt;) q.getResultList();
        return coffees;
    }
    
    /**
     * Update a Coffee object in the database.
     * 
     * @param coffee The Coffee object being updated.
     */
    public void update(Coffee coffee) {
        em.merge(coffee);
    }
    
    /**
     * Query the Coffee table based on a search string.
     * 
     * @param searchString The search text to query by.
     * @return A List of Coffee objects matching the search.
     */
    public List&lt;Coffee&gt; searchByAll(String searchString) {
        Query q = em.createNamedQuery(&quot;Coffee.findByAll&quot;);
        // Note: This must match the name given 
        // in the view's viewparam.
        q.setParameter(&quot;searchString&quot;,
            (&quot;%&quot;+searchString+&quot;%&quot;).toLowerCase());
        List&lt;Coffee&gt; coffees = 
            (List&lt;Coffee&gt;) q.getResultList();
        return coffees;
    }
    
    /**
     * Delete a Coffee object from the table.
     * 
     * @param coffee Coffee to delete.
     */
    public void delete(Coffee coffee) {
        em.merge(coffee);
        em.remove(coffee);
        
    }
}
    </ui:define>
    
    <ui:define name="bean">
package Bean;

import Pojo.Coffee;
import Service.CoffeeService;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.ejb.EJB;
import javax.faces.bean.ViewScoped;

/**
 * Handles displaying information about 
 * a single Coffee object.
 */
@ManagedBean
@ViewScoped
public class ViewCoffeeBean implements Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger LOG = 
        Logger.getLogger(ViewCoffeeBean.class.getName());
    private long id;
    private Coffee coffee;
    @EJB
    private CoffeeService coffeeService;
    
   /**
    * Init method. Loads a Coffee object given an ID, 
    * or throws an error if that Coffee object 
    * cannot be loaded.
    */
    public void init() {
        try {
            coffee = coffeeService.load(id);
        } catch (Exception e) {
            LOG.log(Level.SEVERE, 
                &quot;Error loading the Coffee object&quot;, e);
        }
    }

    /* Getters and Setters */
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Coffee getCoffee() {
        return coffee;
    }

    public void setCoffee(Coffee coffee) {
        this.coffee = coffee;
    }
}
    </ui:define>
</ui:composition>
